<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:task="http://www.springframework.org/schema/task"
	xmlns:cache="http://www.springframework.org/schema/cache" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
        http://www.springframework.org/schema/beans     
        http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.2.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
        http://www.springframework.org/schema/task
        http://www.springframework.org/schema/task/spring-task-4.2.xsd
        http://www.springframework.org/schema/cache
        http://www.springframework.org/schema/cache/spring-cache-4.2.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop-4.2.xsd">

	<context:property-placeholder location="classpath:system.properties" />
	
    <!-- 配置dbcp2数据源 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource"
		destroy-method="close">
		<property name="url" value="${db.url}"></property>
		<property name="driverClassName" value="${db.driver}"></property>
		<property name="username" value="${db.username}"></property>
		<property name="password" value="${db.password}"></property>
		<property name="maxTotal" value="30" />
		<property name="maxIdle" value="20" />
		<property name="minIdle" value="5" />
		<property name="initialSize" value="5" />
		<property name="maxWaitMillis" value="-1" />
		<property name="timeBetweenEvictionRunsMillis" value="120000" />
		<property name="minEvictableIdleTimeMillis" value="300000" />
		<property name="poolPreparedStatements" value="true" />
		<property name="removeAbandonedOnBorrow" value="true" />
	</bean>
	
	<!-- 使用MyBatis-spring的sqlSessionFactory来代替MyBatis本身的sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:xml/mybatis.xml" />
	</bean>

	<!-- 使用MyBatis-spring的sqlSessionTemplate来包装sqlSessionFactory -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" scope="prototype">
		<constructor-arg index="0" ref="sqlSessionFactory" />
		<!-- <constructor-arg index="1" value="BATCH" /> -->
	</bean>

	<!-- 采用自动扫描方式创建mappper bean -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.lakeslove.blog.dao"/>
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate"/>
		<property name="annotationClass" value="org.springframework.stereotype.Repository"/>
	</bean>

	<!-- 信息 开始 -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basenames">
			<list>
				<value>message.message_error</value>
				<value>message.message_generic</value>
				<value>message.message_validate</value>
			</list>
		</property>
		<property name="useCodeAsDefaultMessage" value="false" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="cacheSeconds" value="600" />
	</bean>
	<!-- 信息 结束-->
	
	<!-- 异常处理 start -->
	<bean class="com.lakeslove.blog.exception.ExceptionHandler" />
	<bean id="exceptionResolver"
		class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
		<property name="exceptionMappings">
			<props>
				<prop key="org.springframework.web.multipart.MaxUploadSizeExceededException">testError</prop>
			</props>
		</property>
	</bean>
	<!-- 异常处理 end -->
	
	<!-- 缓存支持 start -->
	<cache:annotation-driven cache-manager="cacheManager"/>
	<bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
		<property name="caches">
			<set>
				<bean
					class="org.springframework.cache.concurrent.ConcurrentMapCacheFactoryBean"
					p:name="masterCache" />
			</set>
		</property>
	</bean>
	<!-- 缓存支持 end -->
	
	<!-- velocityEngine start-->
	<!--<bean id="velocityEngine"-->
		<!--class="org.apache.velocity.VelocityEngineFactoryBean">-->
		<!--<property name="resourceLoaderPath">-->
			<!--<value>classpath:velocity</value>-->
		<!--</property>-->
		<!--<property name="velocityProperties">-->
			<!--<props>-->
				<!--<prop key="file.resource.loader.cache">false</prop>-->
				<!--<prop key="file.resource.loader.modificationCheckInterval">3</prop>-->
				<!--<prop key="input.encoding">UTF-8</prop>-->
				<!--<prop key="output.encoding">UTF-8</prop>-->
			<!--</props>-->
		<!--</property>-->
	<!--</bean>-->
	<!-- velocityEngine end -->

	<!-- sendEmail start -->
	<!-- 解除默认的单例模式，设置scope="prototype" -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl" scope="prototype">
		<property name="host" value="${mail.host}" />
		<property name="username" value="${mail.username}" />
		<property name="password" value="${mail.password}" />
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
				<prop key="mail.smtp.port">${mail.smtp.port}</prop>
			</props>
		</property>
	</bean>
	<!-- sendEmail end -->
	
	<!-- IOC demo start -->
	
	<!-- 在过滤器中注入service start-->
	<!-- 	<bean id="userService" class="com.lx.blog.service.impl.UserServiceImpl"></bean> -->
	<!-- 在过滤器中注入service end-->
	
	<!-- IOC demo end-->
	
	<!-- AOP demo start  -->
	<!-- 切面类 -->
	<!--<bean id="appendLogsByAOP" class="com.lakeslove.blog.util.AppendLogsByAOP"/>-->
	<!-- 切入点 -->
<!-- 	<aop:config>
		<aop:pointcut id="afterMethodPoint" expression="execution(* com.lx.blog.controller.*.*Controller.*(..))"/>
		<aop:aspect id = "appendLogs" ref="appendLogsByAOP">
			<aop:before method="logOutputBeforeMethod" pointcut="afterMethodPoint"/>
			<aop:after-throwing method="logOutputAfterThrows" pointcut="afterMethodPoint"/>
			<aop:after-returning method="logOutputAfterReturn" pointcut-ref="afterMethodPoint"/>
			<aop:after method="logOutputAfterMethod" pointcut-ref="afterMethodPoint"/>
		</aop:aspect>
	</aop:config> -->
	<!-- AOP demo end  -->
	
</beans>
